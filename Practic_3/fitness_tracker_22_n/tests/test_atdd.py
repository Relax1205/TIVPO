# tests/test_atdd.py
import unittest
from datetime import datetime, timedelta
from src.fitness_tracker import FitnessTracker

class TestFitnessTrackerATDD(unittest.TestCase):
    """
    ATDD-—Ç–µ—Å—Ç—ã –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞.
    –ú–æ–¥–µ–ª–∏—Ä—É—é—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã —Å "–∑–∞–∫–∞–∑—á–∏–∫–æ–º" –∫–∞–∫ –ø—Ä–∏—ë–º–æ—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏.
    """

    def setUp(self):
        """–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º."""
        self.tracker = FitnessTracker()

    # ============ –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ú–æ—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ ============
    def test_user_sees_motivation_message_when_progress_over_80_percent(self):
        """
        ATDD –°—Ü–µ–Ω–∞—Ä–∏–π 1:
        Given: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ü–µ–ª—å –ø–æ —à–∞–≥–∞–º = 10000
        And: –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ 8500 —à–∞–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        When: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        Then: –í–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: "–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ!"
        """
        # Given
        self.tracker.set_goal("steps", 10000)
        today = datetime.now().strftime("%Y-%m-%d")
        self.tracker.log_workout(today, 8500, 500.0, 60)  # 85% —Ü–µ–ª–∏

        # When
        stats = self.tracker.get_statistics(7, today)
        goal_progress = stats["goal_progress"].get("steps", {})
        progress_percent = goal_progress.get("progress_percent", 0)

        # Then: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.assertGreater(progress_percent, 80)
        self.assertLess(progress_percent, 100)

        # Then: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–æ–≥–∏–∫–∞ –≤ —Ç–µ—Å—Ç–µ)
        motivation_message = ""
        if 80 < progress_percent < 100:
            motivation_message = "–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ!"

        self.assertEqual(motivation_message, "–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ!")

    # ============ –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏ ============
    def test_user_sees_reminder_after_3_days_of_inactivity(self):
        """
        ATDD –°—Ü–µ–Ω–∞—Ä–∏–π 2:
        Given: –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ 4 –¥–Ω—è –Ω–∞–∑–∞–¥
        When: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
        Then: –í–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: "–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π. –í–µ—Ä–Ω–∏—Å—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º!"
        """
        # Given: –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 4 –¥–Ω—è –Ω–∞–∑–∞–¥
        today = datetime.now()
        four_days_ago = (today - timedelta(days=4)).strftime("%Y-%m-%d")
        self.tracker.log_workout(four_days_ago, 5000, 300.0, 40)

        # When: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        last_workout_date = datetime.strptime(four_days_ago, "%Y-%m-%d")
        days_since_last_workout = (today - last_workout_date).days

        # Then: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        reminder_message = ""
        if days_since_last_workout >= 3:
            reminder_message = "–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π. –í–µ—Ä–Ω–∏—Å—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º!"

        self.assertEqual(days_since_last_workout, 4)
        self.assertEqual(reminder_message, "–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π. –í–µ—Ä–Ω–∏—Å—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º!")

    # ============ –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏ ============
    def test_user_sees_congratulations_when_goal_reached(self):
        """
        ATDD –°—Ü–µ–Ω–∞—Ä–∏–π 3:
        Given: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º = 2000
        And: –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ 2100 –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        When: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        Then: –í–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéâ"
        """
        # Given
        self.tracker.set_goal("calories", 2000)
        today = datetime.now().strftime("%Y-%m-%d")
        self.tracker.log_workout(today, 10000, 2100.0, 90)  # 105% —Ü–µ–ª–∏

        # When
        stats = self.tracker.get_statistics(7, today)
        goal_progress = stats["goal_progress"].get("calories", {})
        progress_percent = goal_progress.get("progress_percent", 0)

        # Then: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.assertGreaterEqual(progress_percent, 100)

        # Then: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        congrat_message = ""
        if progress_percent >= 100:
            congrat_message = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéâ"

        self.assertEqual(congrat_message, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéâ")

    # ============ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∏–∑–∫–∏–π ============
    def test_no_special_message_when_progress_is_low(self):
        """
        ATDD –°—Ü–µ–Ω–∞—Ä–∏–π 4 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π):
        Given: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ü–µ–ª—å –ø–æ —à–∞–≥–∞–º = 10000
        And: –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ 3000 —à–∞–≥–æ–≤
        When: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        Then: –ù–∏–∫–∞–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        """
        # Given
        self.tracker.set_goal("steps", 10000)
        today = datetime.now().strftime("%Y-%m-%d")
        self.tracker.log_workout(today, 3000, 200.0, 30)  # 30% —Ü–µ–ª–∏

        # When
        stats = self.tracker.get_statistics(7, today)
        goal_progress = stats["goal_progress"].get("steps", {})
        progress_percent = goal_progress.get("progress_percent", 0)

        # Then
        self.assertLess(progress_percent, 80)

        # Then: –ù–∏–∫–∞–∫–∏—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö/–ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        special_message = ""
        if progress_percent >= 100:
            special_message = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéâ"
        elif progress_percent > 80:
            special_message = "–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ!"

        self.assertEqual(special_message, "")  # –ù–∏–∫–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


if __name__ == "__main__":
    unittest.main(verbosity=2)