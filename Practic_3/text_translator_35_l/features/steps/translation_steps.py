from behave import given, when, then
from src.text_translator import TextTranslator

@given('—Ç–µ–∫—Å—Ç "{text}" –≤–≤–µ–¥—ë–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
def step_impl(context, text):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
    """
    context.translator = TextTranslator()
    context.input_text = text

# üëá –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –®–ê–ì üëá
@given('—Ç–µ–∫—Å—Ç "" –≤–≤–µ–¥—ë–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
def step_impl(context):
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """
    context.translator = TextTranslator()
    context.input_text = ""

@when('—è –≤—ã–±–∏—Ä–∞—é —è–∑—ã–∫ "{target_lang}"')
def step_impl(context, target_lang):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
    """
    context.target_language = target_lang
    try:
        context.translated_text = context.translator.translate(context.input_text, target_lang)
        context.error_occurred = False
    except ValueError as e:
        context.error_message = str(e)
        context.error_occurred = True

@then('—è –≤–∏–∂—É –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç "{expected_text}"')
def step_impl(context, expected_text):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º.
    """
    assert not context.error_occurred, "–ù–µ –æ–∂–∏–¥–∞–ª–æ—Å—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"
    assert context.translated_text == expected_text, \
        f'–û–∂–∏–¥–∞–ª–æ—Å—å: "{expected_text}", –ø–æ–ª—É—á–µ–Ω–æ: "{context.translated_text}"'

@then('—Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "{expected_message}"')
def step_impl(context, expected_message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤—ã–¥–∞–ª–∞ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    assert context.error_occurred, "–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –æ–Ω–∞ –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–∞"
    assert expected_message in context.error_message, \
        f'–û–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ: "{expected_message}", –ø–æ–ª—É—á–µ–Ω–æ: "{context.error_message}"'