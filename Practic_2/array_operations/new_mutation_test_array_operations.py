# mutation_test.py

import importlib
import sys
from io import StringIO
import unittest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å
import array_operations


# === –ú–£–¢–ê–ù–¢–´ —Ñ—É–Ω–∫—Ü–∏–∏ bubble_sort ===

# –ú—É—Ç–∞–Ω—Ç 1: –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–≤–º–µ—Å—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è) ‚Äî –∑–Ω–∞–∫ > –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ <
def bubble_sort_mutant1(arr):
    if not arr:
        return arr
    sorted_arr = arr.copy()
    n = len(sorted_arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if sorted_arr[j] < sorted_arr[j + 1]:  # –û–®–ò–ë–ö–ê: < –≤–º–µ—Å—Ç–æ >
                sorted_arr[j], sorted_arr[j + 1] = sorted_arr[j + 1], sorted_arr[j]
    return sorted_arr

# –ú—É—Ç–∞–Ω—Ç 2: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ö–æ–¥ (—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º)
def bubble_sort_mutant2(arr):
    if not arr:
        return arr
    sorted_arr = arr.copy()
    n = len(sorted_arr) - 1  # –û–®–ò–ë–ö–ê: —É–º–µ–Ω—å—à–∞–µ–º n
    for i in range(n):
        for j in range(0, n - i - 1):
            if sorted_arr[j] > sorted_arr[j + 1]:
                sorted_arr[j], sorted_arr[j + 1] = sorted_arr[j + 1], sorted_arr[j]
    return sorted_arr

# –ú—É—Ç–∞–Ω—Ç 3: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ (n - i + 1) ‚Äî –ë–ï–ó –ó–ê–©–ò–¢–´
def bubble_sort_mutant3(arr):
    if not arr:
        return arr
    sorted_arr = arr.copy()
    n = len(sorted_arr)
    for i in range(n):
        end = n - i + 1
        for j in range(0, min(end, n)):  # —Ä–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            if j + 1 < n:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: –º–µ–Ω—è–µ–º –Ω–µ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –Ω–∞–¥–æ
                if sorted_arr[j] < sorted_arr[j + 1]:  # –û–ë–†–ê–¢–ù–û–ï —É—Å–ª–æ–≤–∏–µ
                    sorted_arr[j], sorted_arr[j + 1] = sorted_arr[j + 1], sorted_arr[j]
    return sorted_arr

# –ú—É—Ç–∞–Ω—Ç 4: –ù–µ—Ç –æ–±–º–µ–Ω–∞ ‚Äî pass –≤–º–µ—Å—Ç–æ swap
def bubble_sort_mutant4(arr):
    if not arr:
        return arr
    sorted_arr = arr.copy()
    n = len(sorted_arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if sorted_arr[j] > sorted_arr[j + 1]:
                pass  # –û–®–ò–ë–ö–ê: –Ω–µ –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏!
    return sorted_arr

# –ú—É—Ç–∞–Ω—Ç 5: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
def bubble_sort_mutant5(arr):
    if not arr:
        return arr
    return arr  # –ù–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–æ–±—â–µ

# –ú—É—Ç–∞–Ω—Ç 6: –í—Å–µ–≥–¥–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
def bubble_sort_mutant6(arr):
    if not arr:
        return arr
    sorted_arr = arr.copy()
    sorted_arr.sort(reverse=True)
    return sorted_arr


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º—É—Ç–∞–Ω—Ç–æ–≤
mutants = [
    ("Mutant 1: Sort in descending order (< instead of >)", bubble_sort_mutant1),
    ("Mutant 2: Reduce loop range (n-1)", bubble_sort_mutant2),
    ("Mutant 3: Wrong inner loop bound (n-i+1)", bubble_sort_mutant3),
    ("Mutant 4: No swap (pass)", bubble_sort_mutant4),
    ("Mutant 5: Return original array", bubble_sort_mutant5),
    ("Mutant 6: Always sort descending", bubble_sort_mutant6),
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ —Å –ø–æ–¥–º–µ–Ω—ë–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
def run_test_with_mutant(mutant_func):
    # –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–æ–¥—É–ª–µ
    array_operations.bubble_sort = mutant_func

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å
    if 'new_test_array_operations' in sys.modules:
        importlib.reload(sys.modules['new_test_array_operations'])
    from new_test_array_operations import TestArrayOperations

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –¥–ª—è bubble_sort
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestArrayOperations)
    result = unittest.TestResult()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    old_stdout = sys.stdout
    sys.stdout = captured_output = StringIO()
    suite.run(result)
    sys.stdout = old_stdout

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏ ‚Äî –º—É—Ç–∞–Ω—Ç —É–±–∏—Ç
    if len(result.failures) > 0 or len(result.errors) > 0:
        return False, captured_output.getvalue()  # –£–±–∏—Ç
    else:
        return True, captured_output.getvalue()  # –í—ã–∂–∏–ª


# === –û–°–ù–û–í–ù–û–ô –ë–õ–û–ö ===
if __name__ == "__main__":
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ bubble_sort...\n")
    killed = 0
    total = len(mutants)

    for name, mutant in mutants:
        print(f"üîÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
        survived = run_test_with_mutant(mutant)
        if not survived[0]:
            print(f"‚ùå –ú—É—Ç–∞–Ω—Ç —É–±–∏—Ç ‚Äî —Ç–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É")
            killed += 1
        else:
            print(f"‚úÖ –ú—É—Ç–∞–Ω—Ç –≤—ã–∂–∏–ª ‚Äî —Ç–µ—Å—Ç –ù–ï –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É")
        print()

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    importlib.reload(array_operations)

    # –û—Ç—á—ë—Ç
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –£–±–∏—Ç–æ –º—É—Ç–∞–Ω—Ç–æ–≤: {killed}/{total}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏—Ç—ã—Ö: {killed / total * 100:.1f}%")

    if killed == total:
        print("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –º—É—Ç–∞–Ω—Ç—ã —É–±–∏—Ç—ã ‚Äî —Ç–µ—Å—Ç—ã –Ω–∞–¥—ë–∂–Ω—ã.")
    elif killed == 0:
        print("üíÄ –ü–ª–æ—Ö–æ! –ù–∏ –æ–¥–∏–Ω –º—É—Ç–∞–Ω—Ç –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî —Ç–µ—Å—Ç—ã –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º—É—Ç–∞–Ω—Ç—ã –≤—ã–∂–∏–ª–∏ ‚Äî –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ç–µ—Å—Ç—ã.")