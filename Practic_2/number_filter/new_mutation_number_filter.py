# mutation_test_number_filter.py

import importlib
import sys
from io import StringIO

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
import number_filter


# --- –ú—É—Ç–∞–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ is_fibonacci ---

# –ú—É—Ç–∞–Ω—Ç 1: 4*n¬≤ –≤–º–µ—Å—Ç–æ 5*n¬≤ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞)
def is_fibonacci_mutant1(n):
    def is_perfect_square(x):
        if x < 0:
            return False
        root = int(x ** 0.5)
        return root * root == x
    return is_perfect_square(4 * n * n + 4) or is_perfect_square(4 * n * n - 4)

# –ú—É—Ç–∞–Ω—Ç 2: —Ç–æ–ª—å–∫–æ +4, –±–µ–∑ -4
def is_fibonacci_mutant2(n):
    def is_perfect_square(x):
        if x < 0:
            return False
        root = int(x ** 0.5)
        return root * root == x
    return is_perfect_square(5 * n * n + 4)  # ‚ùå –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç -4

# –ú—É—Ç–∞–Ω—Ç 3: –≤—Å–µ–≥–¥–∞ True –¥–ª—è n >= 0
def is_fibonacci_mutant3(n):
    return n >= 0

# –ú—É—Ç–∞–Ω—Ç 4: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç n % 3 == 0 –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫
def is_fibonacci_mutant4(n):
    return n % 3 == 0

# –ú—É—Ç–∞–Ω—Ç 5: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ n —Å—Ç–µ–ø–µ–Ω—å—é 2
def is_fibonacci_mutant5(n):
    if n <= 0:
        return False
    return (n & (n - 1)) == 0  # —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏


# --- –ú—É—Ç–∞–Ω—Ç—ã –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ---

# –ú—É—Ç–∞–Ω—Ç 6: is_even –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç n % 2 != 0 (–ø–µ—Ä–µ–ø—É—Ç–∞–Ω–æ —Å is_odd)
def is_even_mutant1(n):
    return n % 2 != 0

# –ú—É—Ç–∞–Ω—Ç 7: is_prime –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –¥–ª—è –≤—Å–µ—Ö n >= 2
def is_prime_mutant1(n):
    if n < 2:
        return False
    return True  # ‚ùå –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–ª–∏—Ç–µ–ª–∏

# –ú—É—Ç–∞–Ω—Ç 8: filter_even_numbers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ—á—ë—Ç–Ω—ã–µ
def filter_even_numbers_mutant1(numbers):
    return [n for n in numbers if n % 2 != 0]


# –°–ø–∏—Å–æ–∫ –º—É—Ç–∞–Ω—Ç–æ–≤: (–∏–º—è, —Ñ—É–Ω–∫—Ü–∏—è, –∏–º—è_–≤_–º–æ–¥—É–ª–µ)
mutants = [
    ("Fibonacci Mutant 1: 4*n¬≤", is_fibonacci_mutant1, "is_fibonacci"),
    ("Fibonacci Mutant 2: only +4", is_fibonacci_mutant2, "is_fibonacci"),
    ("Fibonacci Mutant 3: n >= 0", is_fibonacci_mutant3, "is_fibonacci"),
    ("Fibonacci Mutant 4: n % 3 == 0", is_fibonacci_mutant4, "is_fibonacci"),
    ("Fibonacci Mutant 5: power of 2", is_fibonacci_mutant5, "is_fibonacci"),
    ("Even Mutant: !=0", is_even_mutant1, "is_even"),
    ("Prime Mutant: always True", is_prime_mutant1, "is_prime"),
    ("FilterEven Mutant: returns odds", filter_even_numbers_mutant1, "filter_even_numbers"),
]


def run_test_with_mutant(mutant_func, target_name):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    original_func = getattr(number_filter, target_name)
    setattr(number_filter, target_name, mutant_func)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
    test_module_name = 'new_test_number_filter'
    if test_module_name in sys.modules:
        importlib.reload(sys.modules[test_module_name])
    else:
        try:
            importlib.import_module(test_module_name)
        except ModuleNotFoundError:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {test_module_name}.py")
            sys.exit(1)

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
    old_stdout = sys.stdout
    sys.stdout = captured_output = StringIO()
    killed = False
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_module = sys.modules[test_module_name]
        for attr in dir(test_module):
            if attr.startswith('test_') and callable(getattr(test_module, attr)):
                getattr(test_module, attr)()
        # –ï—Å–ª–∏ –¥–æ—à–ª–æ —Å—é–¥–∞ ‚Äî —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏
    except Exception as e:
        killed = True
    except SystemExit:
        killed = True
    finally:
        sys.stdout = old_stdout
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        setattr(number_filter, target_name, original_func)

    return killed, captured_output.getvalue()


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è number_filter...\n")
    killed = 0
    total = len(mutants)

    for name, mutant, func_name in mutants:
        print(f"üîÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
        is_killed, output = run_test_with_mutant(mutant, func_name)

        if is_killed:
            print(f"‚ùå –ú—É—Ç–∞–Ω—Ç —É–±–∏—Ç ‚Äî —Ç–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É")
            killed += 1
        else:
            print(f"‚úÖ –ú—É—Ç–∞–Ω—Ç –≤—ã–∂–∏–ª ‚Äî —Ç–µ—Å—Ç –ù–ï –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É")
        print()

    # –û—Ç—á—ë—Ç
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –£–±–∏—Ç–æ –º—É—Ç–∞–Ω—Ç–æ–≤: {killed}/{total}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏—Ç—ã—Ö: {killed / total * 100:.1f}%")

    if killed == total:
        print("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –º—É—Ç–∞–Ω—Ç—ã —É–±–∏—Ç—ã ‚Äî —Ç–µ—Å—Ç—ã –Ω–∞–¥—ë–∂–Ω—ã.")
    elif killed == 0:
        print("üíÄ –ü–ª–æ—Ö–æ! –ù–∏ –æ–¥–∏–Ω –º—É—Ç–∞–Ω—Ç –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî —Ç–µ—Å—Ç—ã –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º—É—Ç–∞–Ω—Ç—ã –≤—ã–∂–∏–ª–∏ ‚Äî –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ç–µ—Å—Ç—ã.")