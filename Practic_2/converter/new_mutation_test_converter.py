# new_mutation_test_converter.py

import importlib
import sys
from io import StringIO
import unittest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
import converter


# --- –ú—É—Ç–∞–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ miles_to_kilometers ---

# –ú—É—Ç–∞–Ω—Ç 1: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5 (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞)
def miles_to_kilometers_mutant1(miles):
    if miles < 0:
        raise ValueError("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
    return miles * 1.5  # ‚ùå –æ—à–∏–±–∫–∞

# –ú—É—Ç–∞–Ω—Ç 2: 1.6 ‚Äî –±–ª–∏–∑–∫–æ, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—à–∏–±–∫–∞
def miles_to_kilometers_mutant2(miles):
    if miles < 0:
        raise ValueError("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
    return miles * 1.6

# –ú—É—Ç–∞–Ω—Ç 3: 1.4 ‚Äî –µ—â—ë —Ö—É–∂–µ
def miles_to_kilometers_mutant3(miles):
    if miles < 0:
        raise ValueError("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
    return miles * 1.4

# –ú—É—Ç–∞–Ω—Ç 4: –∑–∞–±—ã–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
def miles_to_kilometers_mutant4(miles):
    return miles * 1.60934  # ‚ùå –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏

# –ú—É—Ç–∞–Ω—Ç 5: –¥–µ–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–º–Ω–æ–∂–µ–Ω–∏—è
def miles_to_kilometers_mutant5(miles):
    if miles < 0:
        raise ValueError("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
    return miles / 1.60934  # ‚ùå –æ—à–∏–±–∫–∞ –∑–Ω–∞–∫–∞

# –ú—É—Ç–∞–Ω—Ç 6: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–ª–∏ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
def miles_to_kilometers_mutant6(miles):
    if miles < 0:
        raise ValueError("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
    return miles  # ‚ùå –Ω–∏—á–µ–≥–æ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç

# –ú—É—Ç–∞–Ω—Ç 7: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1000 –∫–∞–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–∫–∞–∫ –≤ –≥—Ä–∞–º–º–∞—Ö)
def miles_to_kilometers_mutant7(miles):
    if miles < 0:
        raise ValueError("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
    return miles * 1000


# –°–ø–∏—Å–æ–∫ –º—É—Ç–∞–Ω—Ç–æ–≤: (–∏–º—è, —Ñ—É–Ω–∫—Ü–∏—è, –∏–º—è_–≤_–º–æ–¥—É–ª–µ)
mutants = [
    ("Mutant 1: 1.5", miles_to_kilometers_mutant1, "miles_to_kilometers"),
    ("Mutant 2: 1.6", miles_to_kilometers_mutant2, "miles_to_kilometers"),
    ("Mutant 3: 1.4", miles_to_kilometers_mutant3, "miles_to_kilometers"),
    ("Mutant 4: no negative check", miles_to_kilometers_mutant4, "miles_to_kilometers"),
    ("Mutant 5: division", miles_to_kilometers_mutant5, "miles_to_kilometers"),
    ("Mutant 6: return miles", miles_to_kilometers_mutant6, "miles_to_kilometers"),
    ("Mutant 7: *1000", miles_to_kilometers_mutant7, "miles_to_kilometers"),
]


def run_test_with_mutant(mutant_func, target_name):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    original_func = getattr(converter, target_name)
    setattr(converter, target_name, mutant_func)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
    test_module_name = 'new_test_converter'
    if test_module_name in sys.modules:
        importlib.reload(sys.modules[test_module_name])
    else:
        try:
            importlib.import_module(test_module_name)
        except ModuleNotFoundError:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {test_module_name}.py")
            sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ unittest
    test_stream = StringIO()
    runner = unittest.TextTestRunner(stream=test_stream, verbosity=0)
    suite = unittest.TestLoader().loadTestsFromName(test_module_name)
    result = runner.run(suite)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    setattr(converter, target_name, original_func)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏/–ø–∞–¥–µ–Ω–∏—è ‚Äî –º—É—Ç–∞–Ω—Ç —É–±–∏—Ç
    return len(result.failures) > 0 or len(result.errors) > 0


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è converter...\n")
    killed = 0
    total = len(mutants)

    for name, mutant, func_name in mutants:
        print(f"üîÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
        is_killed = run_test_with_mutant(mutant, func_name)

        if is_killed:
            print(f"‚ùå –ú—É—Ç–∞–Ω—Ç —É–±–∏—Ç ‚Äî —Ç–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É")
            killed += 1
        else:
            print(f"‚úÖ –ú—É—Ç–∞–Ω—Ç –≤—ã–∂–∏–ª ‚Äî —Ç–µ—Å—Ç –ù–ï –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É")
        print()

    # –û—Ç—á—ë—Ç
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –£–±–∏—Ç–æ –º—É—Ç–∞–Ω—Ç–æ–≤: {killed}/{total}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏—Ç—ã—Ö: {killed / total * 100:.1f}%")

    if killed == total:
        print("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –º—É—Ç–∞–Ω—Ç—ã —É–±–∏—Ç—ã ‚Äî —Ç–µ—Å—Ç—ã –Ω–∞–¥—ë–∂–Ω—ã.")
    elif killed == 0:
        print("üíÄ –ü–ª–æ—Ö–æ! –ù–∏ –æ–¥–∏–Ω –º—É—Ç–∞–Ω—Ç –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî —Ç–µ—Å—Ç—ã –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º—É—Ç–∞–Ω—Ç—ã –≤—ã–∂–∏–ª–∏ ‚Äî –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ç–µ—Å—Ç—ã.")