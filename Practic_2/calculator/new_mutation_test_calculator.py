# new_mutation_test_calculator.py

import importlib
import sys
from io import StringIO

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
import calculator


# --- –ú—É—Ç–∞–Ω—Ç—ã ---

# Power Mutant 1: x^0 ‚Üí 0
def power_mutant1(base, exponent):
    if exponent == 0:
        return 0
    return base ** exponent

# Power Mutant 2: x^0 ‚Üí base
def power_mutant2(base, exponent):
    if exponent == 0:
        return base
    return base ** exponent

# Power Mutant 3: 0^0 ‚Üí 0, –Ω–æ x^0 ‚Üí 1 (–æ—à–∏–±–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è 0)
def power_mutant3(base, exponent):
    if exponent == 0:
        return 1 if base != 0 else 0  # –û–®–ò–ë–ö–ê: 0^0 = 0
    return base ** exponent


# Power Mutant 5: if exponent == 1 ‚Üí return 1
def power_mutant5(base, exponent):
    if exponent == 1:
        return 1
    return base ** exponent

# Add Mutant: a - b
def add_mutant1(a, b):
    return a - b

# Multiply Mutant: a + b
def multiply_mutant1(a, b):
    return a + b



# –°–ø–∏—Å–æ–∫ –º—É—Ç–∞–Ω—Ç–æ–≤: (–∏–º—è, —Ñ—É–Ω–∫—Ü–∏—è, –∏–º—è_–≤_–º–æ–¥—É–ª–µ)
mutants = [
    ("Power Mutant 1: x^0 ‚Üí 0", power_mutant1, "power"),
    ("Power Mutant 2: x^0 ‚Üí x", power_mutant2, "power"),
    ("Power Mutant 3: 0^0 ‚Üí 0", power_mutant3, "power"),
    ("Power Mutant 4: if exponent == 1", power_mutant5, "power"),
    ("Add Mutant: a - b", add_mutant1, "add"),
    ("Multiply Mutant: a + b", multiply_mutant1, "multiply"),
]


def run_test_with_mutant(mutant_func, target_name):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    original_func = getattr(calculator, target_name)
    setattr(calculator, target_name, mutant_func)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
    test_module_name = 'new_test_calculator'
    if test_module_name in sys.modules:
        importlib.reload(sys.modules[test_module_name])
    else:
        try:
            importlib.import_module(test_module_name)
        except ModuleNotFoundError:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {test_module_name}.py")
            sys.exit(1)

    test_module = sys.modules[test_module_name]
    test_func = getattr(test_module, f"test_{target_name}", None)
    if not test_func:
        print(f"‚ö†Ô∏è  –¢–µ—Å—Ç –¥–ª—è {target_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        setattr(calculator, target_name, original_func)
        return False

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç –≤—ã–≤–æ–¥–∞
    old_stdout = sys.stdout
    sys.stdout = StringIO()
    killed = False
    try:
        test_func()
    except Exception:
        killed = True
    except SystemExit:
        killed = True
    finally:
        sys.stdout = old_stdout
        setattr(calculator, target_name, original_func)  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å

    return killed


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...\n")
    killed = 0
    total_real = 0
    equivalent = 0

    for name, mutant, func_name in mutants:
        print(f"üîÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
        is_killed = run_test_with_mutant(mutant, func_name)

        if "Power Mutant 4" in name:
            print(f"üü¢ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–π –º—É—Ç–∞–Ω—Ç ‚Äî –≤—ã–∂–∏–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            equivalent += 1
        else:
            total_real += 1
            if is_killed:
                print(f"‚ùå –ú—É—Ç–∞–Ω—Ç —É–±–∏—Ç ‚Äî —Ç–µ—Å—Ç —Å—Ä–∞–±–æ—Ç–∞–ª")
                killed += 1
            else:
                print(f"‚úÖ –ú—É—Ç–∞–Ω—Ç –≤—ã–∂–∏–ª ‚Äî –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê –¢–ï–°–¢–ê")

        print()

    # –û—Ç—á—ë—Ç
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –†–µ–∞–ª—å–Ω—ã–µ –º—É—Ç–∞–Ω—Ç—ã: {total_real}")
    print(f"   –£–±–∏—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –º—É—Ç–∞–Ω—Ç–æ–≤: {killed}/{total_real}")

    if killed == total_real:
        print("üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ‚Äî —Ç–µ—Å—Ç—ã –∏–¥–µ–∞–ª—å–Ω—ã.")
    else:
        print(f"‚ö†Ô∏è  –£–±–∏—Ç–æ —Ç–æ–ª—å–∫–æ {killed}/{total_real} —Ä–µ–∞–ª—å–Ω—ã—Ö –º—É—Ç–∞–Ω—Ç–æ–≤ ‚Äî –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ç–µ—Å—Ç—ã.")