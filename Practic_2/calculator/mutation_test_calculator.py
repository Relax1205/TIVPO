# mutation_test_calculator.py

import importlib
import sys
from io import StringIO

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
import calculator


# --- –ú—É—Ç–∞–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ power ---

# –ú—É—Ç–∞–Ω—Ç 1: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –ø—Ä–∏ exponent = 0 (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞)
def power_mutant1(base, exponent):
    if exponent == 0:
        return 0  # –û–®–ò–ë–ö–ê
    return base ** exponent

# –ú—É—Ç–∞–Ω—Ç 2: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç base –≤–º–µ—Å—Ç–æ 1 –ø—Ä–∏ exponent = 0
def power_mutant2(base, exponent):
    if exponent == 0:
        return base  # –û–®–ò–ë–ö–ê: –Ω–∞–ø—Ä–∏–º–µ—Ä, 5^0 = 5?
    return base ** exponent

# –ú—É—Ç–∞–Ω—Ç 3: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ base != 0
def power_mutant3(base, exponent):
    if exponent == 0:
        return 1 if base != 0 else 0  # –û–®–ò–ë–ö–ê: 0^0 –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –Ω–æ —á–∞—Å—Ç–æ =1
    return base ** exponent

# –ú—É—Ç–∞–Ω—Ç 4: –ó–∞–±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∫—É exponent = 0
def power_mutant4(base, exponent):
    return base ** exponent  # –ü—Ä–æ—Å—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ** (–Ω–æ ** –≤ Python –¥–∞—ë—Ç 1 –ø—Ä–∏ x**0)

# –ú—É—Ç–∞–Ω—Ç 5: –û–ø–µ—á–∞—Ç–∫–∞ –≤ —É—Å–ª–æ–≤–∏–∏ (exponent == 1 –≤–º–µ—Å—Ç–æ 0)
def power_mutant5(base, exponent):
    if exponent == 1:  # –û–®–ò–ë–ö–ê: –Ω–µ —Ç–æ —É—Å–ª–æ–≤–∏–µ
        return 1
    return base ** exponent


# --- –ú—É—Ç–∞–Ω—Ç—ã –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π (–¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã) ---

# –ú—É—Ç–∞–Ω—Ç 6: add –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç a - b (–æ—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
def add_mutant1(a, b):
    return a - b

# –ú—É—Ç–∞–Ω—Ç 7: multiply –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç a + b
def multiply_mutant1(a, b):
    return a + b

# –ú—É—Ç–∞–Ω—Ç 8: divide –Ω–µ –æ–∫—Ä—É–≥–ª—è–µ—Ç (–∞ –¥–æ–ª–∂–µ–Ω)
def divide_mutant1(a, b):
    if b == 0:
        raise ZeroDivisionError("Division by zero is not allowed.")
    return a / b  # ‚ùå –Ω–µ—Ç round(..., 10)


# –°–ø–∏—Å–æ–∫ –º—É—Ç–∞–Ω—Ç–æ–≤: (–∏–º—è, —Ñ—É–Ω–∫—Ü–∏—è-–º—É—Ç–∞–Ω—Ç, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –≤ –º–æ–¥—É–ª–µ)
mutants = [
    ("Power Mutant 1: 0^0 ‚Üí 0", power_mutant1, "power"),
    ("Power Mutant 2: x^0 ‚Üí x", power_mutant2, "power"),
    ("Power Mutant 3: 0^0 ‚Üí 0", power_mutant3, "power"),
    ("Power Mutant 4: –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ 0", power_mutant4, "power"),
    ("Power Mutant 5: if exponent == 1", power_mutant5, "power"),
    ("Add Mutant: a - b", add_mutant1, "add"),
    ("Multiply Mutant: a + b", multiply_mutant1, "multiply"),
    ("Divide Mutant: no rounding", divide_mutant1, "divide"),
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ —Å –ø–æ–¥–º–µ–Ω—ë–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
def run_test_with_mutant(mutant_func, target_function_name):
    # –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–æ–¥—É–ª–µ calculator
    original_func = getattr(calculator, target_function_name)
    setattr(calculator, target_function_name, mutant_func)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å
    test_module_name = 'test_calculator'
    if test_module_name in sys.modules:
        importlib.reload(sys.modules[test_module_name])
    else:
        try:
            importlib.import_module(test_module_name)
        except ModuleNotFoundError:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {test_module_name}.py")
            sys.exit(1)

    test_module = sys.modules[test_module_name]
    test_func = getattr(test_module, f"test_{target_function_name}", None)
    if not test_func:
        print(f"‚ö†Ô∏è  –¢–µ—Å—Ç –¥–ª—è {target_function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        setattr(calculator, target_function_name, original_func)  # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        return True  # "–≤—ã–∂–∏–ª" –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ—Å—Ç–∞

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
    old_stdout = sys.stdout
    sys.stdout = captured_output = StringIO()
    killed = False
    try:
        test_func()
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à—ë–ª ‚Äî –º—É—Ç–∞–Ω—Ç –≤—ã–∂–∏–ª
    except Exception as e:
        killed = True  # –¢–µ—Å—Ç —É–ø–∞–ª ‚Üí –º—É—Ç–∞–Ω—Ç —É–±–∏—Ç
    except SystemExit:
        killed = True
    finally:
        sys.stdout = old_stdout

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    setattr(calculator, target_function_name, original_func)
    return killed, captured_output.getvalue()


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è calculator...\n")
    killed = 0
    total = len(mutants)

    for name, mutant, func_name in mutants:
        print(f"üîÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
        is_killed, output = run_test_with_mutant(mutant, func_name)

        if is_killed:
            print(f"‚ùå –ú—É—Ç–∞–Ω—Ç —É–±–∏—Ç ‚Äî —Ç–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É")
            killed += 1
        else:
            # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: Mutant 4 (base ** exponent) ‚Äî Python –∏ —Ç–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 –ø—Ä–∏ x**0
            if "Power Mutant 4" in name:
                print(f"üü¢ –ú—É—Ç–∞–Ω—Ç –≤—ã–∂–∏–ª ‚Äî –Ω–æ x**0 –≤ Python –¥–∞—ë—Ç 1, —Ç–∞–∫ —á—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è")
            else:
                print(f"‚úÖ –ú—É—Ç–∞–Ω—Ç –≤—ã–∂–∏–ª ‚Äî —Ç–µ—Å—Ç –ù–ï –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É")
        print()

    # –û—Ç—á—ë—Ç
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –£–±–∏—Ç–æ –º—É—Ç–∞–Ω—Ç–æ–≤: {killed}/{total}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏—Ç—ã—Ö: {killed / total * 100:.1f}%")

    # –ê–Ω–∞–ª–∏–∑
    if killed == total:
        print("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –º—É—Ç–∞–Ω—Ç—ã —É–±–∏—Ç—ã ‚Äî —Ç–µ—Å—Ç—ã –Ω–∞–¥—ë–∂–Ω—ã.")
    elif killed == 0:
        print("üíÄ –ü–ª–æ—Ö–æ! –ù–∏ –æ–¥–∏–Ω –º—É—Ç–∞–Ω—Ç –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî —Ç–µ—Å—Ç—ã –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã.")
    else:
        if killed >= total - 1 and any("Power Mutant 4" in n for n, _, _ in mutants):
            print("üü¢ –ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ! –í—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ —É–±–∏—Ç—ã.")
            print("   –û–¥–∏–Ω –≤—ã–∂–∏–≤—à–∏–π ‚Äî –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π Python (**0 = 1).")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –º—É—Ç–∞–Ω—Ç—ã –≤—ã–∂–∏–ª–∏ ‚Äî –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ç–µ—Å—Ç—ã.")