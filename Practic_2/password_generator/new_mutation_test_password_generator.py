# new_mutation_test_password_generator.py

import importlib
import sys
import unittest
from io import StringIO

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
import password_generator


# --- üî• –ú—É—Ç–∞–Ω—Ç—ã: check_password_strength ---


def check_password_strength_mutant1(password):
    """–ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–º–≤–æ–ª—ã"""
    if (password_generator.has_uppercase(password) and
        password_generator.has_lowercase(password) and
        password_generator.has_digits(password)):
        return "strong"
    return "weak"

def check_password_strength_mutant2(password):
    """–ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã"""
    if (password_generator.has_uppercase(password) and
        password_generator.has_digits(password) and
        any(c in "!@#$%&*" for c in password)):
        return "strong"
    return "weak"

def check_password_strength_mutant3(password):
    """–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'strong'"""
    return "strong"

def check_password_strength_mutant4(password):
    """–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'weak'"""
    return "weak"


# --- üîß –ú—É—Ç–∞–Ω—Ç—ã: generate_password ---

def generate_password_mutant1(length, use_upper=True, use_lower=True, use_digits=True, use_symbols=True):
    """–ù–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ö–æ—Ç—è –±—ã –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞"""
    if length < 4:
        raise ValueError("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤.")
    characters = ""
    if use_lower:
        characters += "abcdefghijklmnopqrstuvwxyz"
    if use_upper:
        characters += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if use_digits:
        characters += "0123456789"
    if use_symbols:
        characters += "!@#$%&*"
    if not characters:
        raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–∏–º–≤–æ–ª–æ–≤.")
    # ‚ùå –ù–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    return ''.join(random.choice(characters) for _ in range(length))


def generate_password_mutant2(length, use_upper=True, use_lower=True, use_digits=True, use_symbols=True):
    """–ù–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å (—Å–Ω–∞—á–∞–ª–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)"""
    if length < 4:
        raise ValueError("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤.")
    password = []
    if use_lower:
        password.append(random.choice("abcdefghijklmnopqrstuvwxyz"))
    if use_upper:
        password.append(random.choice("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
    if use_digits:
        password.append(random.choice("0123456789"))
    if use_symbols:
        password.append(random.choice("!@#$%&*"))
    characters = "".join(filter(None, [
        "abcdefghijklmnopqrstuvwxyz" if use_lower else "",
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if use_upper else "",
        "0123456789" if use_digits else "",
        "!@#$%&*" if use_symbols else ""
    ]))
    for _ in range(length - len(password)):
        password.append(random.choice(characters))
    # ‚ùå –ù–µ—Ç random.shuffle(password)
    return ''.join(password)


# --- üî§ –ú—É—Ç–∞–Ω—Ç—ã: –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def has_uppercase_mutant(password):
    """–û—à–∏–±–æ—á–Ω–æ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ 'I' ‚Äî –Ω–µ –∑–∞–≥–ª–∞–≤–Ω–∞—è"""
    return any(c.isupper() for c in password if c != 'I')

def has_lowercase_mutant(password):
    """–°—á–∏—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞"""
    return any(c.islower() for c in password[:3])

def has_digits_mutant(password):
    """–°—á–∏—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ '1', '3', '5', '7', '9' (—á—ë—Ç–Ω—ã–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã)"""
    return any(c in "13579" for c in password)


# --- üß¨ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º—É—Ç–∞–Ω—Ç–æ–≤ ---
mutants = [
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    ("Mutant 1: No symbol check", check_password_strength_mutant1, "check_password_strength"),
    ("Mutant 2: No lowercase check", check_password_strength_mutant2, "check_password_strength"),
    ("Mutant 3: Always strong", check_password_strength_mutant3, "check_password_strength"),
    ("Mutant 4: Always weak", check_password_strength_mutant4, "check_password_strength"),

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    ("Mutant 5: No guaranteed chars", generate_password_mutant1, "generate_password"),
    ("Mutant 6: No shuffle", generate_password_mutant2, "generate_password"),

    ("Mutant 7: has_digits misses even digits", has_digits_mutant, "has_digits"),
]


# --- üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ ---
def run_all_tests(test_module_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–∏"""
    if test_module_name in sys.modules:
        importlib.reload(sys.modules[test_module_name])
    else:
        try:
            importlib.import_module(test_module_name)
        except ModuleNotFoundError:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å: {test_module_name}")
            return False

    test_stream = StringIO()
    runner = unittest.TextTestRunner(stream=test_stream, verbosity=0)
    suite = unittest.TestLoader().loadTestsFromName(test_module_name)
    result = runner.run(suite)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –∏ –ø–∞–¥–µ–Ω–∏–π
    return len(result.failures) == 0 and len(result.errors) == 0


# --- üß´ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
if __name__ == "__main__":
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: password_generator\n")
    killed = 0
    total = len(mutants)

    for name, mutant_func, func_name in mutants:
        print(f"üîÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if not hasattr(password_generator, func_name):
            print(f"‚ùå –§—É–Ω–∫—Ü–∏—è {func_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ")
            continue

        original_func = getattr(password_generator, func_name)
        setattr(password_generator, func_name, mutant_func)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        all_tests_passed = run_all_tests('new_test_password_generator')

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        setattr(password_generator, func_name, original_func)

        if all_tests_passed:
            print(f"‚úÖ –ú—É—Ç–∞–Ω—Ç –≤—ã–∂–∏–ª ‚Äî –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏")
        else:
            print(f"‚ùå –ú—É—Ç–∞–Ω—Ç —É–±–∏—Ç ‚Äî —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Å—Ç —É–ø–∞–ª")
            killed += 1
        print()

    # üìä –û—Ç—á—ë—Ç
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –£–±–∏—Ç–æ –º—É—Ç–∞–Ω—Ç–æ–≤: {killed}/{total}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏—Ç—ã—Ö: {killed / total * 100:.1f}%")

    if killed == total:
        print("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –º—É—Ç–∞–Ω—Ç—ã —É–±–∏—Ç—ã ‚Äî —Ç–µ—Å—Ç—ã –Ω–∞–¥—ë–∂–Ω—ã.")
    elif killed == 0:
        print("üíÄ –ü–ª–æ—Ö–æ! –ù–∏ –æ–¥–∏–Ω –º—É—Ç–∞–Ω—Ç –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Äî —Ç–µ—Å—Ç—ã –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã.")
    else:
        surviving = total - killed
        print(f"‚ö†Ô∏è  {surviving} –º—É—Ç–∞–Ω—Ç–æ–≤ –≤—ã–∂–∏–ª–∏ ‚Äî –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ç–µ—Å—Ç—ã.")